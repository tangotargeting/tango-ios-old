// Generated by Apple Swift version 3.0.2 (swiftlang-800.0.63 clang-800.0.42.1)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import CoreData;
@import Foundation;
@import ObjectiveC;
@import UIKit;
@import UserNotifications;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class NSEntityDescription;
@class NSManagedObjectContext;

SWIFT_CLASS_NAMED("Campaign")
@interface Campaign : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end

@class CampaignContent;
@class CampaignLimits;
@class CampaignSpecifics;
@class CampaignStats;
@class CampaignTargets;
@class CampaignTotalEvents;
@class CampaignScheduler;

@interface Campaign (SWIFT_EXTENSION(Tango))
@property (nonatomic, copy) NSString * _Nullable campaignID;
@property (nonatomic, copy) NSString * _Nullable category;
@property (nonatomic, copy) NSString * _Nullable name;
@property (nonatomic, copy) NSString * _Nullable status;
@property (nonatomic, copy) NSString * _Nullable trigger;
@property (nonatomic) float version;
@property (nonatomic, strong) CampaignContent * _Nullable content;
@property (nonatomic, strong) CampaignLimits * _Nullable limits;
@property (nonatomic, strong) CampaignSpecifics * _Nullable specifics;
@property (nonatomic, strong) CampaignStats * _Nullable stats;
@property (nonatomic, strong) CampaignTargets * _Nullable targets;
@property (nonatomic, strong) CampaignTotalEvents * _Nullable totalEvents;
@property (nonatomic, strong) CampaignScheduler * _Nullable scheduler;
@end


SWIFT_CLASS_NAMED("CampaignAction")
@interface CampaignAction : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface CampaignAction (SWIFT_EXTENSION(Tango))
@end


@interface CampaignAction (SWIFT_EXTENSION(Tango))
@property (nonatomic, copy) NSString * _Nullable title;
@property (nonatomic, copy) NSString * _Nullable type;
@property (nonatomic, copy) NSString * _Nullable uri;
@property (nonatomic, copy) NSString * _Nullable textColorHexARGB;
@property (nonatomic, copy) NSString * _Nullable backgroundColorHexARGB;
@property (nonatomic, strong) CampaignContent * _Nullable primaryContent;
@property (nonatomic, strong) CampaignContent * _Nullable secondaryContent;
@end


SWIFT_CLASS_NAMED("CampaignContent")
@interface CampaignContent : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface CampaignContent (SWIFT_EXTENSION(Tango))
@end

@class CampaignMedia;

@interface CampaignContent (SWIFT_EXTENSION(Tango))
@property (nonatomic, copy) NSString * _Nullable category;
@property (nonatomic, copy) NSString * _Nullable title;
@property (nonatomic, copy) NSString * _Nullable body;
@property (nonatomic, copy) NSString * _Nullable type;
@property (nonatomic, strong) Campaign * _Nullable campaign;
@property (nonatomic, strong) CampaignMedia * _Nullable media;
@property (nonatomic, strong) CampaignAction * _Nullable primaryAction;
@property (nonatomic, strong) CampaignAction * _Nullable secondaryAction;
@end


SWIFT_CLASS_NAMED("CampaignDate")
@interface CampaignDate : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface CampaignDate (SWIFT_EXTENSION(Tango))
@end


@interface CampaignDate (SWIFT_EXTENSION(Tango))
@property (nonatomic) int16_t dayOfYear;
@property (nonatomic) int16_t hour;
@property (nonatomic) int16_t minute;
@property (nonatomic) int16_t year;
@property (nonatomic, strong) CampaignScheduler * _Nullable schedulerEndDate;
@property (nonatomic, strong) CampaignScheduler * _Nullable schedulerStartDate;
@end


SWIFT_CLASS_NAMED("CampaignDay")
@interface CampaignDay : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end

@class CampaignSchedulerRepeat;

@interface CampaignDay (SWIFT_EXTENSION(Tango))
@property (nonatomic) int16_t day;
@property (nonatomic, strong) CampaignSchedulerRepeat * _Nullable monthdays;
@property (nonatomic, strong) CampaignSchedulerRepeat * _Nullable weekdays;
@end


SWIFT_CLASS_NAMED("CampaignEvent")
@interface CampaignEvent : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface CampaignEvent (SWIFT_EXTENSION(Tango))
@property (nonatomic, copy) NSString * _Nullable timestamp;
@property (nonatomic, copy) NSString * _Nullable eventUUID;
@property (nonatomic, copy) NSString * _Nullable type;
@property (nonatomic, strong) CampaignStats * _Nullable campaignStats;
@end


SWIFT_CLASS_NAMED("CampaignLimits")
@interface CampaignLimits : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end

@class NSDate;

@interface CampaignLimits (SWIFT_EXTENSION(Tango))
@property (nonatomic, strong) NSDate * _Nullable beginTime;
@property (nonatomic, strong) NSDate * _Nullable endTime;
@property (nonatomic) int16_t maxClicksPerDevice;
@property (nonatomic) int16_t maxDisplayPerDevice;
@property (nonatomic, strong) Campaign * _Nullable campaign;
@end


SWIFT_CLASS_NAMED("CampaignMedia")
@interface CampaignMedia : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface CampaignMedia (SWIFT_EXTENSION(Tango))
@end

@class NSData;
@class CampaignMediaSize;

@interface CampaignMedia (SWIFT_EXTENSION(Tango))
@property (nonatomic, strong) NSData * _Nullable imageData;
@property (nonatomic, copy) NSString * _Nullable source;
@property (nonatomic, copy) NSString * _Nullable type;
@property (nonatomic, strong) CampaignContent * _Nullable content;
@property (nonatomic, strong) CampaignMediaSize * _Nullable size;
@end


SWIFT_CLASS_NAMED("CampaignMediaSize")
@interface CampaignMediaSize : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface CampaignMediaSize (SWIFT_EXTENSION(Tango))
@end


@interface CampaignMediaSize (SWIFT_EXTENSION(Tango))
@property (nonatomic) float height;
@property (nonatomic, copy) NSString * _Nullable sizeID;
@property (nonatomic) float width;
@property (nonatomic, strong) CampaignMedia * _Nullable mediaSize;
@end


SWIFT_CLASS_NAMED("CampaignScheduler")
@interface CampaignScheduler : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end

@class CampaignSchedulerSpecificDates;

@interface CampaignScheduler (SWIFT_EXTENSION(Tango))
@property (nonatomic) BOOL useLocalTime;
@property (nonatomic, strong) Campaign * _Nullable campaign;
@property (nonatomic, strong) CampaignDate * _Nullable endDate;
@property (nonatomic, strong) CampaignSchedulerRepeat * _Nullable repeatInterval;
@property (nonatomic, strong) CampaignSchedulerSpecificDates * _Nullable specificDates;
@property (nonatomic, strong) CampaignDate * _Nullable startDate;
@end


SWIFT_CLASS_NAMED("CampaignSchedulerRepeat")
@interface CampaignSchedulerRepeat : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end

@class NSSet;

@interface CampaignSchedulerRepeat (SWIFT_EXTENSION(Tango))
- (void)addWeekdaysObject:(CampaignDay * _Nonnull)value;
- (void)removeWeekdaysObject:(CampaignDay * _Nonnull)value;
- (void)addWeekdays:(NSSet * _Nonnull)values;
- (void)removeWeekdays:(NSSet * _Nonnull)values;
@end


@interface CampaignSchedulerRepeat (SWIFT_EXTENSION(Tango))
- (void)addMonthdaysObject:(CampaignDay * _Nonnull)value;
- (void)removeMonthdaysObject:(CampaignDay * _Nonnull)value;
- (void)addMonthdays:(NSSet * _Nonnull)values;
- (void)removeMonthdays:(NSSet * _Nonnull)values;
@end


@interface CampaignSchedulerRepeat (SWIFT_EXTENSION(Tango))
@property (nonatomic) int16_t fromMinute;
@property (nonatomic) int16_t toMinute;
@property (nonatomic, strong) NSSet * _Nullable monthdays;
@property (nonatomic, strong) CampaignScheduler * _Nullable scheduler;
@property (nonatomic, strong) NSSet * _Nullable weekdays;
@end


SWIFT_CLASS_NAMED("CampaignSchedulerSpecificDates")
@interface CampaignSchedulerSpecificDates : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end

@class CampaignSpecificDate;

@interface CampaignSchedulerSpecificDates (SWIFT_EXTENSION(Tango))
- (void)addSpecificDatesObject:(CampaignSpecificDate * _Nonnull)value;
- (void)removeSpecificDatesObject:(CampaignSpecificDate * _Nonnull)value;
- (void)addSpecificDates:(NSSet * _Nonnull)values;
- (void)removeSpecificDates:(NSSet * _Nonnull)values;
@end


@interface CampaignSchedulerSpecificDates (SWIFT_EXTENSION(Tango))
@property (nonatomic, strong) CampaignScheduler * _Nullable scheduler;
@property (nonatomic, strong) NSSet * _Nullable specificDates;
@end


SWIFT_CLASS_NAMED("CampaignSpecificDate")
@interface CampaignSpecificDate : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface CampaignSpecificDate (SWIFT_EXTENSION(Tango))
@end


@interface CampaignSpecificDate (SWIFT_EXTENSION(Tango))
@property (nonatomic) int16_t year;
@property (nonatomic) int16_t dayOfYear;
@property (nonatomic) int16_t fromMinute;
@property (nonatomic) int16_t toMinute;
@property (nonatomic, strong) CampaignSchedulerSpecificDates * _Nullable schedulerSpecificDates;
@end


SWIFT_CLASS_NAMED("CampaignSpecifics")
@interface CampaignSpecifics : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end

@class CampaignSpecificsKeywords;

@interface CampaignSpecifics (SWIFT_EXTENSION(Tango))
- (void)addExcludeKeywordsObject:(CampaignSpecificsKeywords * _Nonnull)value;
- (void)removeExcludeKeywordsObject:(CampaignSpecificsKeywords * _Nonnull)value;
- (void)addExcludeKeywords:(NSSet * _Nonnull)values;
- (void)removeExcludeKeywords:(NSSet * _Nonnull)values;
@end


@interface CampaignSpecifics (SWIFT_EXTENSION(Tango))
- (void)addIncludedKeywordsObject:(CampaignSpecificsKeywords * _Nonnull)value;
- (void)removeIncludedKeywordsObject:(CampaignSpecificsKeywords * _Nonnull)value;
- (void)addIncludedKeywords:(NSSet * _Nonnull)values;
- (void)removeIncludedKeywords:(NSSet * _Nonnull)values;
@end


@interface CampaignSpecifics (SWIFT_EXTENSION(Tango))
@property (nonatomic) int16_t displayIntervalSec;
@property (nonatomic) int16_t minimumDisplayIntervalSec;
@property (nonatomic) BOOL requireAllExcludedKeywords;
@property (nonatomic) BOOL requireAllIncludedKeywords;
@property (nonatomic) int16_t secondsToDisplay;
@property (nonatomic, strong) Campaign * _Nullable campaign;
@property (nonatomic, strong) NSSet * _Nullable excludeKeywords;
@property (nonatomic, strong) NSSet * _Nullable includedKeywords;
@end


SWIFT_CLASS_NAMED("CampaignSpecificsKeywords")
@interface CampaignSpecificsKeywords : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface CampaignSpecificsKeywords (SWIFT_EXTENSION(Tango))
@property (nonatomic, copy) NSString * _Nullable keyword;
@property (nonatomic, strong) CampaignSpecifics * _Nullable campaignSpecificsExcludedKeywords;
@property (nonatomic, strong) CampaignSpecifics * _Nullable campaignSpecificsIncludedKeiwords;
@end


SWIFT_CLASS_NAMED("CampaignStats")
@interface CampaignStats : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface CampaignStats (SWIFT_EXTENSION(Tango))
- (void)addEventsObject:(CampaignEvent * _Nonnull)value;
- (void)removeEventsObject:(CampaignEvent * _Nonnull)value;
- (void)addEvents:(NSSet * _Nonnull)values;
- (void)removeEvents:(NSSet * _Nonnull)values;
@end


@interface CampaignStats (SWIFT_EXTENSION(Tango))
@property (nonatomic, strong) Campaign * _Nullable campaign;
@property (nonatomic, strong) NSSet * _Nullable events;
@end


SWIFT_CLASS_NAMED("CampaignTargets")
@interface CampaignTargets : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end

@class CampaignTargetsLocations;

@interface CampaignTargets (SWIFT_EXTENSION(Tango))
- (void)addLocationsObject:(CampaignTargetsLocations * _Nonnull)value;
- (void)removeLocationsObject:(CampaignTargetsLocations * _Nonnull)value;
- (void)addLocations:(NSSet * _Nonnull)values;
- (void)removeLocations:(NSSet * _Nonnull)values;
@end


@interface CampaignTargets (SWIFT_EXTENSION(Tango))
@property (nonatomic, strong) Campaign * _Nullable campaign;
@property (nonatomic, strong) NSSet * _Nullable locations;
@end


SWIFT_CLASS_NAMED("CampaignTargetsLocations")
@interface CampaignTargetsLocations : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface CampaignTargetsLocations (SWIFT_EXTENSION(Tango))
@end


@interface CampaignTargetsLocations (SWIFT_EXTENSION(Tango))
@property (nonatomic) double latitude;
@property (nonatomic, copy) NSString * _Nullable locationID;
@property (nonatomic) double longitude;
@property (nonatomic) double meters;
@property (nonatomic) BOOL onEnter;
@property (nonatomic) BOOL onExit;
@property (nonatomic) int16_t onStay;
@property (nonatomic, strong) CampaignTargets * _Nullable campaignTarget;
@end


SWIFT_CLASS_NAMED("CampaignTotalEvents")
@interface CampaignTotalEvents : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface CampaignTotalEvents (SWIFT_EXTENSION(Tango))
@property (nonatomic) int16_t totalClose;
@property (nonatomic) int16_t totalDisplay;
@property (nonatomic) int16_t totalClicks;
@property (nonatomic, strong) Campaign * _Nullable campaign;
@end


@interface NSNumber (SWIFT_EXTENSION(Tango))
@end

@class NSURLSession;
@class NSURLAuthenticationChallenge;
@class NSURLCredential;
@class NSURLSessionTask;
@class NSHTTPURLResponse;
@class NSInputStream;
@class NSURLSessionDataTask;
@class NSURLResponse;
@class NSURLSessionDownloadTask;
@class NSCachedURLResponse;
@class NSURLSessionStreamTask;
@class NSOutputStream;

/**
  Responsible for handling all delegate callbacks for the underlying session.
*/
SWIFT_CLASS("_TtC5Tango15SessionDelegate")
@interface SessionDelegate : NSObject
/**
  Overrides default behavior for URLSessionDelegate method \code
  urlSession(_:didBecomeInvalidWithError:)
  \endcode.
*/
@property (nonatomic, copy) void (^ _Nullable sessionDidBecomeInvalidWithError)(NSURLSession * _Nonnull, NSError * _Nullable);
/**
  Overrides all behavior for URLSessionDelegate method \code
  urlSession(_:didReceive:completionHandler:)
  \endcode and requires the caller to call the \code
  completionHandler
  \endcode.
*/
@property (nonatomic, copy) void (^ _Nullable sessionDidReceiveChallengeWithCompletion)(NSURLSession * _Nonnull, NSURLAuthenticationChallenge * _Nonnull, void (^ _Nonnull)(enum NSURLSessionAuthChallengeDisposition, NSURLCredential * _Nullable));
/**
  Overrides default behavior for URLSessionDelegate method \code
  urlSessionDidFinishEvents(forBackgroundURLSession:)
  \endcode.
*/
@property (nonatomic, copy) void (^ _Nullable sessionDidFinishEventsForBackgroundURLSession)(NSURLSession * _Nonnull);
/**
  Overrides default behavior for URLSessionTaskDelegate method \code
  urlSession(_:task:willPerformHTTPRedirection:newRequest:completionHandler:)
  \endcode.
*/
@property (nonatomic, copy) NSURLRequest * _Nullable (^ _Nullable taskWillPerformHTTPRedirection)(NSURLSession * _Nonnull, NSURLSessionTask * _Nonnull, NSHTTPURLResponse * _Nonnull, NSURLRequest * _Nonnull);
/**
  Overrides all behavior for URLSessionTaskDelegate method \code
  urlSession(_:task:willPerformHTTPRedirection:newRequest:completionHandler:)
  \endcode and
  requires the caller to call the \code
  completionHandler
  \endcode.
*/
@property (nonatomic, copy) void (^ _Nullable taskWillPerformHTTPRedirectionWithCompletion)(NSURLSession * _Nonnull, NSURLSessionTask * _Nonnull, NSHTTPURLResponse * _Nonnull, NSURLRequest * _Nonnull, void (^ _Nonnull)(NSURLRequest * _Nullable));
/**
  Overrides all behavior for URLSessionTaskDelegate method \code
  urlSession(_:task:didReceive:completionHandler:)
  \endcode and
  requires the caller to call the \code
  completionHandler
  \endcode.
*/
@property (nonatomic, copy) void (^ _Nullable taskDidReceiveChallengeWithCompletion)(NSURLSession * _Nonnull, NSURLSessionTask * _Nonnull, NSURLAuthenticationChallenge * _Nonnull, void (^ _Nonnull)(enum NSURLSessionAuthChallengeDisposition, NSURLCredential * _Nullable));
/**
  Overrides default behavior for URLSessionTaskDelegate method \code
  urlSession(_:task:needNewBodyStream:)
  \endcode.
*/
@property (nonatomic, copy) NSInputStream * _Nullable (^ _Nullable taskNeedNewBodyStream)(NSURLSession * _Nonnull, NSURLSessionTask * _Nonnull);
/**
  Overrides all behavior for URLSessionTaskDelegate method \code
  urlSession(_:task:needNewBodyStream:)
  \endcode and
  requires the caller to call the \code
  completionHandler
  \endcode.
*/
@property (nonatomic, copy) void (^ _Nullable taskNeedNewBodyStreamWithCompletion)(NSURLSession * _Nonnull, NSURLSessionTask * _Nonnull, void (^ _Nonnull)(NSInputStream * _Nullable));
/**
  Overrides default behavior for URLSessionTaskDelegate method \code
  urlSession(_:task:didSendBodyData:totalBytesSent:totalBytesExpectedToSend:)
  \endcode.
*/
@property (nonatomic, copy) void (^ _Nullable taskDidSendBodyData)(NSURLSession * _Nonnull, NSURLSessionTask * _Nonnull, int64_t, int64_t, int64_t);
/**
  Overrides default behavior for URLSessionTaskDelegate method \code
  urlSession(_:task:didCompleteWithError:)
  \endcode.
*/
@property (nonatomic, copy) void (^ _Nullable taskDidComplete)(NSURLSession * _Nonnull, NSURLSessionTask * _Nonnull, NSError * _Nullable);
/**
  Overrides default behavior for URLSessionDataDelegate method \code
  urlSession(_:dataTask:didReceive:completionHandler:)
  \endcode.
*/
@property (nonatomic, copy) enum NSURLSessionResponseDisposition (^ _Nullable dataTaskDidReceiveResponse)(NSURLSession * _Nonnull, NSURLSessionDataTask * _Nonnull, NSURLResponse * _Nonnull);
/**
  Overrides all behavior for URLSessionDataDelegate method \code
  urlSession(_:dataTask:didReceive:completionHandler:)
  \endcode and
  requires caller to call the \code
  completionHandler
  \endcode.
*/
@property (nonatomic, copy) void (^ _Nullable dataTaskDidReceiveResponseWithCompletion)(NSURLSession * _Nonnull, NSURLSessionDataTask * _Nonnull, NSURLResponse * _Nonnull, void (^ _Nonnull)(enum NSURLSessionResponseDisposition));
/**
  Overrides default behavior for URLSessionDataDelegate method \code
  urlSession(_:dataTask:didBecome:)
  \endcode.
*/
@property (nonatomic, copy) void (^ _Nullable dataTaskDidBecomeDownloadTask)(NSURLSession * _Nonnull, NSURLSessionDataTask * _Nonnull, NSURLSessionDownloadTask * _Nonnull);
/**
  Overrides default behavior for URLSessionDataDelegate method \code
  urlSession(_:dataTask:didReceive:)
  \endcode.
*/
@property (nonatomic, copy) void (^ _Nullable dataTaskDidReceiveData)(NSURLSession * _Nonnull, NSURLSessionDataTask * _Nonnull, NSData * _Nonnull);
/**
  Overrides default behavior for URLSessionDataDelegate method \code
  urlSession(_:dataTask:willCacheResponse:completionHandler:)
  \endcode.
*/
@property (nonatomic, copy) NSCachedURLResponse * _Nullable (^ _Nullable dataTaskWillCacheResponse)(NSURLSession * _Nonnull, NSURLSessionDataTask * _Nonnull, NSCachedURLResponse * _Nonnull);
/**
  Overrides all behavior for URLSessionDataDelegate method \code
  urlSession(_:dataTask:willCacheResponse:completionHandler:)
  \endcode and
  requires caller to call the \code
  completionHandler
  \endcode.
*/
@property (nonatomic, copy) void (^ _Nullable dataTaskWillCacheResponseWithCompletion)(NSURLSession * _Nonnull, NSURLSessionDataTask * _Nonnull, NSCachedURLResponse * _Nonnull, void (^ _Nonnull)(NSCachedURLResponse * _Nullable));
/**
  Overrides default behavior for URLSessionDownloadDelegate method \code
  urlSession(_:downloadTask:didFinishDownloadingTo:)
  \endcode.
*/
@property (nonatomic, copy) void (^ _Nullable downloadTaskDidFinishDownloadingToURL)(NSURLSession * _Nonnull, NSURLSessionDownloadTask * _Nonnull, NSURL * _Nonnull);
/**
  Overrides default behavior for URLSessionDownloadDelegate method \code
  urlSession(_:downloadTask:didWriteData:totalBytesWritten:totalBytesExpectedToWrite:)
  \endcode.
*/
@property (nonatomic, copy) void (^ _Nullable downloadTaskDidWriteData)(NSURLSession * _Nonnull, NSURLSessionDownloadTask * _Nonnull, int64_t, int64_t, int64_t);
/**
  Overrides default behavior for URLSessionDownloadDelegate method \code
  urlSession(_:downloadTask:didResumeAtOffset:expectedTotalBytes:)
  \endcode.
*/
@property (nonatomic, copy) void (^ _Nullable downloadTaskDidResumeAtOffset)(NSURLSession * _Nonnull, NSURLSessionDownloadTask * _Nonnull, int64_t, int64_t);
/**
  Overrides default behavior for URLSessionStreamDelegate method \code
  urlSession(_:readClosedFor:)
  \endcode.
*/
@property (nonatomic, copy) void (^ _Nullable streamTaskReadClosed)(NSURLSession * _Nonnull, NSURLSessionStreamTask * _Nonnull);
/**
  Overrides default behavior for URLSessionStreamDelegate method \code
  urlSession(_:writeClosedFor:)
  \endcode.
*/
@property (nonatomic, copy) void (^ _Nullable streamTaskWriteClosed)(NSURLSession * _Nonnull, NSURLSessionStreamTask * _Nonnull);
/**
  Overrides default behavior for URLSessionStreamDelegate method \code
  urlSession(_:betterRouteDiscoveredFor:)
  \endcode.
*/
@property (nonatomic, copy) void (^ _Nullable streamTaskBetterRouteDiscovered)(NSURLSession * _Nonnull, NSURLSessionStreamTask * _Nonnull);
/**
  Overrides default behavior for URLSessionStreamDelegate method \code
  urlSession(_:streamTask:didBecome:outputStream:)
  \endcode.
*/
@property (nonatomic, copy) void (^ _Nullable streamTaskDidBecomeInputAndOutputStreams)(NSURLSession * _Nonnull, NSURLSessionStreamTask * _Nonnull, NSInputStream * _Nonnull, NSOutputStream * _Nonnull);
/**
  Initializes the \code
  SessionDelegate
  \endcode instance.

  returns:
  The new \code
  SessionDelegate
  \endcode instance.
*/
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/**
  Returns a \code
  Bool
  \endcode indicating whether the \code
  SessionDelegate
  \endcode implements or inherits a method that can respond
  to a specified message.
  \param selector A selector that identifies a message.


  returns:
  \code
  true
  \endcode if the receiver implements or inherits a method that can respond to selector, otherwise \code
  false
  \endcode.
*/
- (BOOL)respondsToSelector:(SEL _Nonnull)selector;
@end


@interface SessionDelegate (SWIFT_EXTENSION(Tango)) <NSURLSessionDelegate>
/**
  Tells the delegate that the session has been invalidated.
  \param session The session object that was invalidated.

  \param error The error that caused invalidation, or nil if the invalidation was explicit.

*/
- (void)URLSession:(NSURLSession * _Nonnull)session didBecomeInvalidWithError:(NSError * _Nullable)error;
/**
  Requests credentials from the delegate in response to a session-level authentication request from the
  remote server.
  \param session The session containing the task that requested authentication.

  \param challenge An object that contains the request for authentication.

  \param completionHandler A handler that your delegate method must call providing the disposition
  and credential.

*/
- (void)URLSession:(NSURLSession * _Nonnull)session didReceiveChallenge:(NSURLAuthenticationChallenge * _Nonnull)challenge completionHandler:(void (^ _Nonnull)(enum NSURLSessionAuthChallengeDisposition, NSURLCredential * _Nullable))completionHandler;
/**
  Tells the delegate that all messages enqueued for a session have been delivered.
  \param session The session that no longer has any outstanding requests.

*/
- (void)URLSessionDidFinishEventsForBackgroundURLSession:(NSURLSession * _Nonnull)session;
@end


@interface SessionDelegate (SWIFT_EXTENSION(Tango)) <NSURLSessionDownloadDelegate>
/**
  Tells the delegate that a download task has finished downloading.
  \param session The session containing the download task that finished.

  \param downloadTask The download task that finished.

  \param location A file URL for the temporary file. Because the file is temporary, you must either
  open the file for reading or move it to a permanent location in your app’s sandbox
  container directory before returning from this delegate method.

*/
- (void)URLSession:(NSURLSession * _Nonnull)session downloadTask:(NSURLSessionDownloadTask * _Nonnull)downloadTask didFinishDownloadingToURL:(NSURL * _Nonnull)location;
/**
  Periodically informs the delegate about the download’s progress.
  \param session The session containing the download task.

  \param downloadTask The download task.

  \param bytesWritten The number of bytes transferred since the last time this delegate
  method was called.

  \param totalBytesWritten The total number of bytes transferred so far.

  \param totalBytesExpectedToWrite The expected length of the file, as provided by the Content-Length
  header. If this header was not provided, the value is
  \code
  NSURLSessionTransferSizeUnknown
  \endcode.

*/
- (void)URLSession:(NSURLSession * _Nonnull)session downloadTask:(NSURLSessionDownloadTask * _Nonnull)downloadTask didWriteData:(int64_t)bytesWritten totalBytesWritten:(int64_t)totalBytesWritten totalBytesExpectedToWrite:(int64_t)totalBytesExpectedToWrite;
/**
  Tells the delegate that the download task has resumed downloading.
  \param session The session containing the download task that finished.

  \param downloadTask The download task that resumed. See explanation in the discussion.

  \param fileOffset If the file’s cache policy or last modified date prevents reuse of the
  existing content, then this value is zero. Otherwise, this value is an
  integer representing the number of bytes on disk that do not need to be
  retrieved again.

  \param expectedTotalBytes The expected length of the file, as provided by the Content-Length header.
  If this header was not provided, the value is NSURLSessionTransferSizeUnknown.

*/
- (void)URLSession:(NSURLSession * _Nonnull)session downloadTask:(NSURLSessionDownloadTask * _Nonnull)downloadTask didResumeAtOffset:(int64_t)fileOffset expectedTotalBytes:(int64_t)expectedTotalBytes;
@end


@interface SessionDelegate (SWIFT_EXTENSION(Tango)) <NSURLSessionStreamDelegate>
/**
  Tells the delegate that the read side of the connection has been closed.
  \param session The session.

  \param streamTask The stream task.

*/
- (void)URLSession:(NSURLSession * _Nonnull)session readClosedForStreamTask:(NSURLSessionStreamTask * _Nonnull)streamTask;
/**
  Tells the delegate that the write side of the connection has been closed.
  \param session The session.

  \param streamTask The stream task.

*/
- (void)URLSession:(NSURLSession * _Nonnull)session writeClosedForStreamTask:(NSURLSessionStreamTask * _Nonnull)streamTask;
/**
  Tells the delegate that the system has determined that a better route to the host is available.
  \param session The session.

  \param streamTask The stream task.

*/
- (void)URLSession:(NSURLSession * _Nonnull)session betterRouteDiscoveredForStreamTask:(NSURLSessionStreamTask * _Nonnull)streamTask;
/**
  Tells the delegate that the stream task has been completed and provides the unopened stream objects.
  \param session The session.

  \param streamTask The stream task.

  \param inputStream The new input stream.

  \param outputStream The new output stream.

*/
- (void)URLSession:(NSURLSession * _Nonnull)session streamTask:(NSURLSessionStreamTask * _Nonnull)streamTask didBecomeInputStream:(NSInputStream * _Nonnull)inputStream outputStream:(NSOutputStream * _Nonnull)outputStream;
@end


@interface SessionDelegate (SWIFT_EXTENSION(Tango)) <NSURLSessionDataDelegate>
/**
  Tells the delegate that the data task received the initial reply (headers) from the server.
  \param session The session containing the data task that received an initial reply.

  \param dataTask The data task that received an initial reply.

  \param response A URL response object populated with headers.

  \param completionHandler A completion handler that your code calls to continue the transfer, passing a
  constant to indicate whether the transfer should continue as a data task or
  should become a download task.

*/
- (void)URLSession:(NSURLSession * _Nonnull)session dataTask:(NSURLSessionDataTask * _Nonnull)dataTask didReceiveResponse:(NSURLResponse * _Nonnull)response completionHandler:(void (^ _Nonnull)(enum NSURLSessionResponseDisposition))completionHandler;
/**
  Tells the delegate that the data task was changed to a download task.
  \param session The session containing the task that was replaced by a download task.

  \param dataTask The data task that was replaced by a download task.

  \param downloadTask The new download task that replaced the data task.

*/
- (void)URLSession:(NSURLSession * _Nonnull)session dataTask:(NSURLSessionDataTask * _Nonnull)dataTask didBecomeDownloadTask:(NSURLSessionDownloadTask * _Nonnull)downloadTask;
/**
  Tells the delegate that the data task has received some of the expected data.
  \param session The session containing the data task that provided data.

  \param dataTask The data task that provided data.

  \param data A data object containing the transferred data.

*/
- (void)URLSession:(NSURLSession * _Nonnull)session dataTask:(NSURLSessionDataTask * _Nonnull)dataTask didReceiveData:(NSData * _Nonnull)data;
/**
  Asks the delegate whether the data (or upload) task should store the response in the cache.
  \param session The session containing the data (or upload) task.

  \param dataTask The data (or upload) task.

  \param proposedResponse The default caching behavior. This behavior is determined based on the current
  caching policy and the values of certain received headers, such as the Pragma
  and Cache-Control headers.

  \param completionHandler A block that your handler must call, providing either the original proposed
  response, a modified version of that response, or NULL to prevent caching the
  response. If your delegate implements this method, it must call this completion
  handler; otherwise, your app leaks memory.

*/
- (void)URLSession:(NSURLSession * _Nonnull)session dataTask:(NSURLSessionDataTask * _Nonnull)dataTask willCacheResponse:(NSCachedURLResponse * _Nonnull)proposedResponse completionHandler:(void (^ _Nonnull)(NSCachedURLResponse * _Nullable))completionHandler;
@end

@class NSURLSessionTaskMetrics;

@interface SessionDelegate (SWIFT_EXTENSION(Tango)) <NSURLSessionTaskDelegate>
/**
  Tells the delegate that the remote server requested an HTTP redirect.
  \param session The session containing the task whose request resulted in a redirect.

  \param task The task whose request resulted in a redirect.

  \param response An object containing the server’s response to the original request.

  \param request A URL request object filled out with the new location.

  \param completionHandler A closure that your handler should call with either the value of the request
  parameter, a modified URL request object, or NULL to refuse the redirect and
  return the body of the redirect response.

*/
- (void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task willPerformHTTPRedirection:(NSHTTPURLResponse * _Nonnull)response newRequest:(NSURLRequest * _Nonnull)request completionHandler:(void (^ _Nonnull)(NSURLRequest * _Nullable))completionHandler;
/**
  Requests credentials from the delegate in response to an authentication request from the remote server.
  \param session The session containing the task whose request requires authentication.

  \param task The task whose request requires authentication.

  \param challenge An object that contains the request for authentication.

  \param completionHandler A handler that your delegate method must call providing the disposition
  and credential.

*/
- (void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task didReceiveChallenge:(NSURLAuthenticationChallenge * _Nonnull)challenge completionHandler:(void (^ _Nonnull)(enum NSURLSessionAuthChallengeDisposition, NSURLCredential * _Nullable))completionHandler;
/**
  Tells the delegate when a task requires a new request body stream to send to the remote server.
  \param session The session containing the task that needs a new body stream.

  \param task The task that needs a new body stream.

  \param completionHandler A completion handler that your delegate method should call with the new body stream.

*/
- (void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task needNewBodyStream:(void (^ _Nonnull)(NSInputStream * _Nullable))completionHandler;
/**
  Periodically informs the delegate of the progress of sending body content to the server.
  \param session The session containing the data task.

  \param task The data task.

  \param bytesSent The number of bytes sent since the last time this delegate method was called.

  \param totalBytesSent The total number of bytes sent so far.

  \param totalBytesExpectedToSend The expected length of the body data.

*/
- (void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task didSendBodyData:(int64_t)bytesSent totalBytesSent:(int64_t)totalBytesSent totalBytesExpectedToSend:(int64_t)totalBytesExpectedToSend;
/**
  Tells the delegate that the session finished collecting metrics for the task.
  \param session The session collecting the metrics.

  \param task The task whose metrics have been collected.

  \param metrics The collected metrics.

*/
- (void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task didFinishCollectingMetrics:(NSURLSessionTaskMetrics * _Nonnull)metrics;
/**
  Tells the delegate that the task finished transferring data.
  \param session The session containing the task whose request finished transferring data.

  \param task The task whose request finished transferring data.

  \param error If an error occurred, an error object indicating how the transfer failed, otherwise nil.

*/
- (void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task didCompleteWithError:(NSError * _Nullable)error;
@end

@class NSOperationQueue;

/**
  The task delegate is responsible for handling all delegate callbacks for the underlying task as well as
  executing all operations attached to the serial operation queue upon task completion.
*/
SWIFT_CLASS("_TtC5Tango12TaskDelegate")
@interface TaskDelegate : NSObject
/**
  The serial operation queue used to execute all operations after the task completes.
*/
@property (nonatomic, readonly, strong) NSOperationQueue * _Nonnull queue;
/**
  The data returned by the server.
*/
@property (nonatomic, readonly, copy) NSData * _Nullable data;
/**
  The error generated throughout the lifecyle of the task.
*/
@property (nonatomic) NSError * _Nullable error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface UIColor (SWIFT_EXTENSION(Tango))
@end


@interface UIDevice (SWIFT_EXTENSION(Tango))
@end


@interface UIImage (SWIFT_EXTENSION(Tango))
@end


@interface UIImageView (SWIFT_EXTENSION(Tango))
- (void)loadGifWithName:(NSString * _Nonnull)name;
@end


@interface UIImageView (SWIFT_EXTENSION(Tango))
@end


@interface UIView (SWIFT_EXTENSION(Tango))
@end


@interface UNNotificationAttachment (SWIFT_EXTENSION(Tango))
@end


@interface UNNotificationCategory (SWIFT_EXTENSION(Tango))
@end


@interface NSURLSession (SWIFT_EXTENSION(Tango))
@end

#pragma clang diagnostic pop
